// <auto-generated />
using System;
using Api.Core.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Api.Core.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20220929013136_erp")]
    partial class erp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Api.Core.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Altura")
                        .HasColumnType("int");

                    b.Property<string>("Calle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CodigoPostal")
                        .HasColumnType("int");

                    b.Property<int?>("CondicionIva")
                        .HasColumnType("int");

                    b.Property<int?>("CondicionPagoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnvioPorEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Estado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EstadoFacturacion")
                        .HasColumnType("int");

                    b.Property<int?>("JurisdiccionId")
                        .HasColumnType("int");

                    b.Property<int?>("LocalidadId")
                        .HasColumnType("int");

                    b.Property<int?>("MetodoEnvio")
                        .HasColumnType("int");

                    b.Property<string>("NombreUsuario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NumeroDeDocumento")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NumeroIngresosBrutos")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OmsId")
                        .HasColumnType("int");

                    b.Property<string>("PisoDepartamento")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("TipoCliente")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CondicionPagoId");

                    b.HasIndex("JurisdiccionId");

                    b.HasIndex("LocalidadId");

                    b.HasIndex("OmsId")
                        .HasName("IX_Clientes_OmsId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Api.Core.Entities.Compania", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApellidoUsuario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AuthId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NombreUsuario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Companias");
                });

            modelBuilder.Entity("Api.Core.Entities.Comprobante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("Archivo")
                        .HasColumnType("longblob");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LiquidacionId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Posicion")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("LiquidacionId");

                    b.ToTable("Comprobantes");
                });

            modelBuilder.Entity("Api.Core.Entities.Concepto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGeneric")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Conceptos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Enabled = false,
                            IsGeneric = true,
                            Nombre = "Flete"
                        });
                });

            modelBuilder.Entity("Api.Core.Entities.ConceptoCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("ConceptoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(20, 2)");

                    b.Property<string>("Observacion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ConceptoId");

                    b.ToTable("ConceptosClientes");
                });

            modelBuilder.Entity("Api.Core.Entities.ConceptoLiquidacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ConceptoClienteId")
                        .HasColumnType("int");

                    b.Property<int>("ConceptoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Detalle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<int>("LiquidacionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(20, 2)");

                    b.Property<string>("Observacion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ConceptoClienteId");

                    b.HasIndex("ConceptoId");

                    b.HasIndex("LiquidacionId");

                    b.ToTable("ConceptosLiquidaciones");
                });

            modelBuilder.Entity("Api.Core.Entities.CondicionPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ErpId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CondicionesPago");
                });

            modelBuilder.Entity("Api.Core.Entities.DetalleLiquidacionPos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Alto")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Ancho")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("CodigoEnvio")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<int>("EstadoEnvio")
                        .HasColumnType("int");

                    b.Property<string>("Etiqueta")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Largo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("LiquidacionId")
                        .HasColumnType("int");

                    b.Property<int>("OmsId")
                        .HasColumnType("int");

                    b.Property<decimal>("OtrosGastos")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Peso")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("ValorSinImpuesto")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Valoritems")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Volumen")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("LiquidacionId");

                    b.HasIndex("OmsId")
                        .HasName("IX_DetalleLiquidacionPos_OmsId");

                    b.ToTable("DetalleLiquidacionPos");
                });

            modelBuilder.Entity("Api.Core.Entities.DetalleLiquidacionPre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("CodigoOrdenPago")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<string>("IdMercadoPago")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IdOrdenPago")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IdPreferenciaMP")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("LiquidacionId")
                        .HasColumnType("int");

                    b.Property<int>("OmsId")
                        .HasColumnType("int");

                    b.Property<decimal>("OtrosGastos")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Urlpago")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("ValorSinImpuesto")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("LiquidacionId");

                    b.HasIndex("OmsId")
                        .HasName("IX_DetalleLiquidacionPre_OmsId");

                    b.ToTable("DetalleLiquidacionPre");
                });

            modelBuilder.Entity("Api.Core.Entities.ErpMilongaIdentificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IdentificationTypeID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ErpMilongaIdentificationTypeDbSet");
                });

            modelBuilder.Entity("Api.Core.Entities.ErpMilongaProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductTypeID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ErpMilongaProductTypeDbSet");
                });

            modelBuilder.Entity("Api.Core.Entities.ErpMilongaTaxType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TaxTypeID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ErpMilongaTaxTypeDbSet");
                });

            modelBuilder.Entity("Api.Core.Entities.ErpMilongaUnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UnitOfMeasureID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ErpMilongaUnitOfMeasureDbSet");
                });

            modelBuilder.Entity("Api.Core.Entities.IngresosBrutosArchivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("Archivo")
                        .HasColumnType("longblob");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Posicion")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("IngresosBrutosArchivos");
                });

            modelBuilder.Entity("Api.Core.Entities.Jurisdiccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Jurisdiccion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "901",
                            Descripcion = "Capital Federal"
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "902",
                            Descripcion = "Buenos Aires"
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "903",
                            Descripcion = "Catamarca"
                        },
                        new
                        {
                            Id = 4,
                            Codigo = "904",
                            Descripcion = "Cordoba"
                        },
                        new
                        {
                            Id = 5,
                            Codigo = "905",
                            Descripcion = "Corrientes"
                        },
                        new
                        {
                            Id = 6,
                            Codigo = "906",
                            Descripcion = "Chaco"
                        },
                        new
                        {
                            Id = 7,
                            Codigo = "907",
                            Descripcion = "Chubut"
                        },
                        new
                        {
                            Id = 8,
                            Codigo = "908",
                            Descripcion = "Entre Rios"
                        },
                        new
                        {
                            Id = 9,
                            Codigo = "909",
                            Descripcion = "Formosa"
                        },
                        new
                        {
                            Id = 10,
                            Codigo = "910",
                            Descripcion = "Jujuy"
                        },
                        new
                        {
                            Id = 11,
                            Codigo = "911",
                            Descripcion = "La Pampa"
                        },
                        new
                        {
                            Id = 12,
                            Codigo = "912",
                            Descripcion = "La Rioja"
                        },
                        new
                        {
                            Id = 13,
                            Codigo = "913",
                            Descripcion = "Mendoza"
                        },
                        new
                        {
                            Id = 14,
                            Codigo = "914",
                            Descripcion = "Misiones"
                        },
                        new
                        {
                            Id = 15,
                            Codigo = "915",
                            Descripcion = "Neuquen"
                        },
                        new
                        {
                            Id = 16,
                            Codigo = "916",
                            Descripcion = "Rio Negro"
                        },
                        new
                        {
                            Id = 17,
                            Codigo = "917",
                            Descripcion = "Salta"
                        },
                        new
                        {
                            Id = 18,
                            Codigo = "918",
                            Descripcion = "San Juan"
                        },
                        new
                        {
                            Id = 19,
                            Codigo = "919",
                            Descripcion = "San Luis"
                        },
                        new
                        {
                            Id = 20,
                            Codigo = "920",
                            Descripcion = "Santa Cruz"
                        },
                        new
                        {
                            Id = 21,
                            Codigo = "921",
                            Descripcion = "Santa Fe"
                        },
                        new
                        {
                            Id = 22,
                            Codigo = "922",
                            Descripcion = "Santiago del Estero"
                        },
                        new
                        {
                            Id = 23,
                            Codigo = "923",
                            Descripcion = "Tierra del Fuego"
                        },
                        new
                        {
                            Id = 24,
                            Codigo = "924",
                            Descripcion = "Tucuman"
                        },
                        new
                        {
                            Id = 25,
                            Codigo = "Z",
                            Descripcion = "No aplicable"
                        });
                });

            modelBuilder.Entity("Api.Core.Entities.Licencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CompaniaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expiracion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CompaniaId");

                    b.ToTable("Licencias");
                });

            modelBuilder.Entity("Api.Core.Entities.Liquidacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ErpId")
                        .HasColumnType("int");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<string>("Factura")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<decimal>("MontoFinalFactura")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("MontoTotalImpuestos")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("NumeroFactura")
                        .HasColumnType("int");

                    b.Property<string>("OtrosComprobantes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.ToTable("Liquidaciones");
                });

            modelBuilder.Entity("Api.Core.Entities.Localidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Localidades");
                });

            modelBuilder.Entity("Api.Core.Entities.Permiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Permisos");
                });

            modelBuilder.Entity("Api.Core.Entities.Provincia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Provincias");
                });

            modelBuilder.Entity("Api.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Api.Core.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("User_id")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Api.Core.Entities.Cliente", b =>
                {
                    b.HasOne("Api.Core.Entities.CondicionPago", "CondicionPago")
                        .WithMany()
                        .HasForeignKey("CondicionPagoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Api.Core.Entities.Jurisdiccion", "Jurisdiccion")
                        .WithMany()
                        .HasForeignKey("JurisdiccionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Api.Core.Entities.Localidad", "Localidad")
                        .WithMany()
                        .HasForeignKey("LocalidadId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Api.Core.Entities.Comprobante", b =>
                {
                    b.HasOne("Api.Core.Entities.Liquidacion", "Liquidacion")
                        .WithMany("Comprobantes")
                        .HasForeignKey("LiquidacionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Core.Entities.ConceptoCliente", b =>
                {
                    b.HasOne("Api.Core.Entities.Cliente", "Cliente")
                        .WithMany("Conceptos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Api.Core.Entities.Concepto", "Concepto")
                        .WithMany("Clientes")
                        .HasForeignKey("ConceptoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Core.Entities.ConceptoLiquidacion", b =>
                {
                    b.HasOne("Api.Core.Entities.ConceptoCliente", "ConceptoCliente")
                        .WithMany()
                        .HasForeignKey("ConceptoClienteId");

                    b.HasOne("Api.Core.Entities.Concepto", "Concepto")
                        .WithMany("Liquidaciones")
                        .HasForeignKey("ConceptoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Api.Core.Entities.Liquidacion", "Liquidacion")
                        .WithMany("Conceptos")
                        .HasForeignKey("LiquidacionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Core.Entities.DetalleLiquidacionPos", b =>
                {
                    b.HasOne("Api.Core.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Core.Entities.Liquidacion", "Liquidacion")
                        .WithMany("DetalleLiquidacionPos")
                        .HasForeignKey("LiquidacionId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Api.Core.Entities.DetalleLiquidacionPre", b =>
                {
                    b.HasOne("Api.Core.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Core.Entities.Liquidacion", "Liquidacion")
                        .WithMany("DetalleLiquidacionPre")
                        .HasForeignKey("LiquidacionId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Api.Core.Entities.IngresosBrutosArchivo", b =>
                {
                    b.HasOne("Api.Core.Entities.Cliente", "Cliente")
                        .WithMany("IngresosBrutosArchivos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Core.Entities.Licencia", b =>
                {
                    b.HasOne("Api.Core.Entities.Compania", "Compania")
                        .WithMany("Licencias")
                        .HasForeignKey("CompaniaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Core.Entities.Liquidacion", b =>
                {
                    b.HasOne("Api.Core.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Core.Entities.Localidad", b =>
                {
                    b.HasOne("Api.Core.Entities.Provincia", "Provincia")
                        .WithMany("Localidades")
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Core.Entities.Role", b =>
                {
                    b.HasOne("Api.Core.Entities.Usuario", null)
                        .WithMany("Roles")
                        .HasForeignKey("UsuarioId");
                });
#pragma warning restore 612, 618
        }
    }
}
